name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 3. AES secrets를 환경 변수로 등록
      - name: Set up secrets as env variables
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "SERVER_IP_ADDRESS=${{ secrets.SERVER_IP_ADDRESS }}" >> $GITHUB_ENV
          echo "AES_SECRET=${{ secrets.AES_SECRET }}" >> $GITHUB_ENV

      # 4. application.properties 파일 생성
      - name: Generate application.properties
        run: |
          mkdir -p ./src/main/resources
          echo "aes.secret=$AES_SECRET" >> ./src/main/resources/application-release.properties
          echo "eureka.instance.ip-address=$SERVER_IP_ADDRESS" >> ./src/main/resources/application-release.properties
          echo "spring.datasource.url=$DB_URL" >> ./src/main/resources/application-release.properties
          echo "spring.datasource.username=$DB_USERNAME" >> ./src/main/resources/application-release.properties
          echo "spring.datasource.password=$DB_PASSWORD" >> ./src/main/resources/application-release.properties
          echo "aes.secret.key=$AES_SECRET" >> ./src/main/resources/application-release.properties

      - name: Configure Maven for GitHub Packages
        run: |
            mkdir -p ~/.m2
            cat <<EOF > ~/.m2/settings.xml
            <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
            <server>
            <id>github-packages</id>
            <username>${{ secrets.COMMON_LIB_ACTOR }}</username>
            <password>${{ secrets.COMMON_LIB_TOKEN }}</password>
            </server>
            </servers>
            </settings>
            EOF

      # 5. 테스트 생략하고 빌드
      - name: Package without tests
        run: mvn clean package -Dmaven.test.skip=true

      # 6. SCP를 통해 서버로 jar 파일 전송
      - name: Upload jar to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "target/*.jar"
          target: "~/"
          rm: false

      # 7. 원격 서버에서 스크립트 실행
      - name: Execute startup script on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: startup/authServiceStartup.sh